**In Git, origin is the default name given to the remote repository from which you cloned your local repository.

git clone <remote_url>
-- When i clone a remote repo (https://github.com/Gaurav4400/Git-Commands) in my local dir 'Github' a new dir get generated in my dir with same name as remote repo.

touch notes.txt
-- created a new file notes.txt

git add notes.txt
-- added notes.txt to staging area

git status
-- confirmed notes.txt was added to staging area

git commit -m 'add: notes.txt'
-- committed all modified files with a -m(message) 'add: notes.txt' to local git 

git push https://github.com/Gaurav4400/Git-Commands
-- pushed committed changes to remote repo


(written from remote)
(written on local)

git pull https://github.com/Gaurav4400/Git-Commands
-- pull all files from remote repo and reflect remote into local

(written to check git diff)

git diff
-- showed difference between local and staging

git reset diff.txt/ git restore --staged diff.txt
-- unstages all changes for the specific file

git reset / git restore --staged . 
-- unstages all changes 

(written from remote to check fetch command)

git fetch https://github.com/Gaurav4400/Git-Commands/
--  git fetch retrieves the metadata without applying changes locally.

git merge https://github.com/Gaurav4400/Git-Commands/
-- to reflect fetched changes into local use git merge explicitly
(note: fetch and merge works only once for each commit i.e once a commit is fetched and merged and if we try to fetch and merge again for same commit it will say Already up to date.)

git remote -v ( show the URLs of remote repository under the origin name.)
----origin  https://github.com/Gaurav4400/Git-Commands (fetch)
----origin  https://github.com/Gaurav4400/Git-Commands (push)

**when trying to fetch and merge from remote where remote and local both have their own committed changes then git will give conflict and auto merge fails , and we need to manually decide which one or both changes to be kept.
